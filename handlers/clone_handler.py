import os
import shutil
import zipfile
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db.database import save_bot_info, save_bot_location, save_config_path, save_env_path
from config import ADMIN_ID

class CloneBot(StatesGroup):
    waiting_for_token = State()
    waiting_for_admin_id = State()
    waiting_for_bot_name = State()
    waiting_for_archive = State()

async def clone_bot(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.reply("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞.")
    await CloneBot.waiting_for_token.set()

async def process_token(message: types.Message, state: FSMContext):
    try:
        token = message.text
        await state.update_data(token=token)
        await message.reply("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await CloneBot.waiting_for_admin_id.set()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.finish()

async def process_admin_id(message: types.Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        await state.update_data(admin_id=admin_id)
        await message.reply("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞.")
        await CloneBot.waiting_for_bot_name.set()
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.finish()

async def process_bot_name(message: types.Message, state: FSMContext):
    try:
        bot_name = message.text
        await state.update_data(bot_name=bot_name)
        await message.reply(
            "–ò–º—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –∫–æ–¥–æ–º –±–æ—Ç–∞ (zip –∏–ª–∏ tar.gz).\n"
            "–ê—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."
        )
        await CloneBot.waiting_for_archive.set()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –±–æ—Ç–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.finish()

async def process_archive(message: types.Message, state: FSMContext):
    try:
        await message.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ö–∏–≤–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        bot_name = data['bot_name']
        token = data['token']
        admin_id = data['admin_id']

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        base_dir = "bots"
        clone_dir = os.path.join(base_dir, bot_name)
        os.makedirs(clone_dir, exist_ok=True)
        await message.reply(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–æ—Ç–∞: {clone_dir}")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        download_path = os.path.join("downloads", message.document.file_name)
        os.makedirs("downloads", exist_ok=True)
        await message.reply("–°–∫–∞—á–∏–≤–∞—é –∞—Ä—Ö–∏–≤...")
        await message.document.download(destination_file=download_path)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        await message.reply("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤...")
        if download_path.endswith('.zip'):
            shutil.unpack_archive(download_path, clone_dir, 'zip')
        elif download_path.endswith('.tar.gz'):
            shutil.unpack_archive(download_path, clone_dir, 'gztar')
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .zip –∏–ª–∏ .tar.gz")

        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_path = os.path.join(clone_dir, '.env')
        with open(env_path, 'w') as env_file:
            env_file.write(f"BOT_TOKEN={token}\n")
            env_file.write(f"ADMIN_ID={admin_id}\n")
        await message.reply("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_bot_info(bot_name, token, admin_id, clone_dir)
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(download_path):
            os.remove(download_path)

        await message.reply(
            f"‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            f"üìÅ –ü—É—Ç—å –∫ –±–æ—Ç—É: {clone_dir}\n"
            f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_name}\n"
            f"üë§ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."
        )

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {str(e)}")
    finally:
        await state.finish()

def register_clone_handlers(dp):
    dp.register_message_handler(clone_bot, commands=['clone'])
    dp.register_message_handler(process_token, state=CloneBot.waiting_for_token)
    dp.register_message_handler(process_admin_id, state=CloneBot.waiting_for_admin_id)
    dp.register_message_handler(process_bot_name, state=CloneBot.waiting_for_bot_name)
    dp.register_message_handler(process_archive, state=CloneBot.waiting_for_archive, content_types=['document'])